using System;
using System.Collections.Generic;
using System.Linq;
using System.Runtime.InteropServices;
using System.Text;
using System.Threading.Tasks;

namespace Plat2d_2.EngineCore
{
    public class SFXengineB
    {
        /* Code generated by Chatgpt, use prompt https://chatgpt.com/share/68d2fe37-b5fc-8012-956e-04c16d03d902 */
        // --- DLL Import ---
        [DllImport("winmm.dll", SetLastError = true)]
        private static extern bool PlaySound(string pszSound, IntPtr hmod, uint fdwSound);

        // --- Flags for PlaySound ---
        private const uint SND_ASYNC = 0x0001;        // Play asynchronously
        private const uint SND_FILENAME = 0x00020000; // pszSound is a filename
        private const uint SND_NODEFAULT = 0x0002;    // Don’t play Windows default beep
        private const uint SND_NOSTOP = 0x0010;       // Don’t cut itself off

        // --- Singleton instance ---
        private static readonly SFXengineB _instance = new SFXengineB();
        public static SFXengineB Instance => _instance;

        // --- Sound registry ---
        private readonly Dictionary<string, string> _sounds = new Dictionary<string, string>();

        // Tracks currently playing sounds per name
        private readonly HashSet<string> _currentlyPlaying = new HashSet<string>();
        private SFXengineB() { } // private constructor (singleton)

        /// <summary>
        /// Register a sound with a name and file path.
        /// </summary>
        public void RegisterSound(string name, string filePath)
        {
            _sounds[name] = filePath;
            LogUtility.MonitorAudiosystem($"Registering audio {filePath} asbyname {name}",6);
            Log.Info($"Registering audio ¤{filePath}¤ asbyname '{name}'", 6);
        }

        /// <summary>
        /// Play a sound by name.
        /// </summary>
        public void Play(string name, bool cutItself = true)
        {
            if (!EngineCore.logAplayCLI) 
            {
                Log.Info("Play() called");
            }
            if (!_sounds.ContainsKey(name))
            {
                if (!EngineCore.logAplayCLI) 
                {
                    Log.Error($"Sound '{name}' not registered.");
                }
                throw new ArgumentException($"Sound '{name}' not registered.");
            }


            string path = _sounds[name];
            uint flags = SND_ASYNC | SND_FILENAME | SND_NODEFAULT;

            if (!cutItself)
                flags |= SND_NOSTOP;
            if (EngineCore.logAplayCLI)
            {
                Log.Warning($"Trying to play...{name}\n---ispath{path},\n---flags:{SND_ASYNC}//{SND_FILENAME}//{SND_NODEFAULT}\n---selfstop:flag?{SND_NOSTOP}bool?{cutItself}");
            }

            PlaySound(path, IntPtr.Zero, flags);
        }

        /// <summary>
        /// Stop all currently playing sounds (like a pause).
        /// </summary>
        public void StopAll()
        {
            Log.Select("SFX stopped // StopAll()");
            // Passing null as pszSound stops all sounds immediately
            PlaySound(null, IntPtr.Zero, 0);
        }
    }
}

//usage doc
//class Program
//{
//    static void Main()
//    {
//        var audio = AudioManager.Instance;

//        // Register sounds once
//        audio.RegisterSound("jump", "jump.wav");
//        audio.RegisterSound("explosion", "explosion.wav");

//        // Play them
//        audio.Play("jump");
//        audio.Play("explosion", cutItself: false);

//        Console.WriteLine("Press P to pause sounds, R to replay, Q to quit.");

//        while (true)
//        {
//            var key = Console.ReadKey(true).Key;

//            if (key == ConsoleKey.P)
//            {
//                audio.StopAll();
//                Console.WriteLine("Paused.");
//            }
//            else if (key == ConsoleKey.R)
//            {
//                audio.Play("jump"); // starts from beginning
//                Console.WriteLine("Resumed.");
//            }
//            else if (key == ConsoleKey.Q)
//            {
//                audio.StopAll();
//                break;
//            }
//        }
//    }
//}